#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# ROS
import rospy
import json
import time 

# Standart, System and Third party
import threading
from threading import Timer
import sentry_sdk

from stations import COMStation, HTTPStation, MQTTStation
from feeders import LuftdatenFeeder, RobonomicsFeeder, DatalogFeeder, FrontierFeeder
from stations.trackargostation import TrackAgroStation
from utils.database import DataBase


class WorkerNode:
    """The main class that initialize stations and feeders and launches the loop."""

    def __init__(self):
        # rospy.init_node("worker", log_level=rospy.DEBUG)
        rospy.init_node("worker")
        rospy.loginfo("Launching worker node...")

        self.config = self._read_configuration()
        rospy.logdebug(self.config)

        self.interval = self.config["general"]["publish_interval"]

        sentry_sdk.init(self.config["dev"]["sentry"])

        self.stations = self._populate_stations()
        self.feeders = self._populate_feeders()
        self.station_data = []
        self.db = DataBase(self.config)
        rospy.loginfo("Worker node is launched")


    def _read_configuration(self) -> dict:
        """Internal method

        Loads configuration.
        """
        config_path = rospy.get_param("~config")
        rospy.logdebug(config_path)
        try:
            with open(config_path) as f:
                content = f.read()
                config = json.loads(content)
                rospy.logdebug(f"Configuration dict: {content}")
                return config
        except Exception as e:
            while True:
                rospy.logerr("Configuration file is broken or not readable!")
                rospy.logerr(e)
                rospy.sleep(5)

    def _populate_stations(self) -> []:
        """Initialize stations

        If you make a new one, add initialization here.
        Don't forget to append an instance to `s`
        """
        s = []
        if self.config["comstation"]["enable"]:
            s.append(COMStation(self.config))

        if self.config["httpstation"]["enable"]:
            s.append(HTTPStation(self.config))

        if self.config["mqttstation"]["enable"]:
            s.append(MQTTStation(self.config))
        
        if self.config["trackagro"]["enable"]:
            s.append(TrackAgroStation(self.config))

        return s

    def _populate_feeders(self) -> []:
        """Initialize feeders

        If you make a new one, add initialization here.
        """
        f = [LuftdatenFeeder(self.config),
             FrontierFeeder(self.config),
             RobonomicsFeeder(self.config),
             DatalogFeeder(self.config)]

        return f


    def spin(self):

        def get_result():
            rospy.loginfo("Getting data from the stations...")
            Timer(self.interval, get_result).start()
            for s in self.stations:
                self.station_data = s.get_data()
                rospy.loginfo(f"{s.version}: {self.station_data}")
            
        def send_result():
            rospy.loginfo("Sending result to the feeders...")
            Timer(self.interval, send_result).start()
            for f in self.feeders:
                class_name = f.get_classname()
                t = threading.Thread(target=f.feed, args=(self.station_data,))
                t.name = class_name
                t.start()
                t.join(timeout=20)
           
        def db_watcher():
            rospy.loginfo("Checking data base...")
            Timer(3600, db_watcher).start()
            for data in self.db.checker(time.time()):
                for hash in data:
                    self.feeders[3].to_datalog(hash)
                     

        get_result()
        send_result()
        db_watcher()
        rospy.spin()

if __name__ == "__main__":
    WorkerNode().spin()

